"use client";
import { useState } from "react";
import { useSpeechRecognition } from "@/hooks/useSpeechRecognition";
import { useRouter } from "next/navigation"; // Importer le hook du routeur de Next.js

export default function SpeechToDatabase() {
    const { text, isListening, startListening, stopListening } = useSpeechRecognition();
    const [mode, setMode] = useState<"question" | "reponse">("question");
    const [response, setResponse] = useState<string | null>(null); // Contient la r√©ponse de la base de donn√©es
    const [isQuestionSaved, setIsQuestionSaved] = useState(false); // Si la question a √©t√© sauvegard√©e
    const [manualText, setManualText] = useState<string>(""); // Saisie manuelle pour la r√©ponse
    const router = useRouter(); // Utilisation du hook de navigation

    // Fonction pour d√©marrer la reconnaissance vocale selon le mode (question ou r√©ponse)
    const handleStartListening = (newMode: "question" | "reponse") => {
        setMode(newMode);
        startListening(); // D√©marrer la reconnaissance vocale
    };

    // Fonction pour arr√™ter l'enregistrement vocal
    const handleStopListening = () => {
        stopListening(); // Arr√™ter la reconnaissance vocale
    };

    // Fonction pour le traitement apr√®s le clic sur Submit
    const handleSubmit = async () => {
        if (mode === "question") {
            // V√©rifier si la transcription contient le mot "question"
            if (text && text.toLowerCase().startsWith("question")) {
                // Chercher la r√©ponse dans la base de donn√©es en utilisant le texte
                const response = await fetch(`/api/questions?query=${text}`);
                const data = await response.json();

                if (data.response) {
                    // Mettre √† jour la r√©ponse avec celle obtenue de l'API
                    setResponse(data.response);
                    // Si une r√©ponse est trouv√©e, rediriger vers la page de rapport
                    router.push(`/rapport?question=${text}&response=${data.response}`);
                } else {
                    // Si aucune r√©ponse n'est trouv√©e
                    alert("Aucune r√©ponse trouv√©e. Vous pouvez enregistrer cette question.");
                    setIsQuestionSaved(true);
                    // Affichage du message vocal
                    const msg = new SpeechSynthesisUtterance("Aucune r√©ponse trouv√©e. Vous pouvez enregistrer cette question.");
                    window.speechSynthesis.speak(msg);
                }
            } else {
                alert("Veuillez poser une question !");
            }
        } else if (mode === "reponse") {
            // Sauvegarder la r√©ponse si le mode est "reponse"
            if (!manualText) {
                alert("Veuillez entrer une r√©ponse manuellement avant de sauvegarder.");
                return;
            }
            // Appeler l'API pour sauvegarder la r√©ponse
            await fetch(`/api/responses`, {
                method: "POST",
                body: JSON.stringify({ question: text, answer: manualText }), // Sauvegarder la question et la r√©ponse
            });

            alert("R√©ponse sauvegard√©e avec succ√®s !");
        }
    };

    return (
        <div className="flex flex-col items-center p-4 bg-gray-100 min-h-screen">
            <h1 className="text-2xl font-bold mb-4">üéôÔ∏è Enregistrement vocal</h1>

            {/* Premi√®re colonne - Reconnaissance vocale */}
            <div className="w-full max-w-lg p-4 bg-white rounded-lg shadow-md">
                <p className="text-gray-700">
                    <strong>Texte reconnu :</strong>
                </p>
                <div className="p-3 mt-2 border border-gray-300 rounded-md min-h-[80px]">
                    {text || <span className="text-gray-400">Parle et vois le texte ici...</span>}
                </div>
            </div>

            <div className="mt-4 flex gap-4">
                {/* Boutons d'enregistrement vocal */}
                <button
                    onClick={() => handleStartListening("question")}
                    disabled={isListening}
                    className="px-4 py-2 bg-blue-500 text-white rounded-lg hover:bg-blue-600"
                >
                    üé§ D√©marrer Question
                </button>
                <button
                    onClick={() => handleStartListening("reponse")}
                    disabled={isListening || !isQuestionSaved}
                    className="px-4 py-2 bg-green-500 text-white rounded-lg hover:bg-green-600"
                >
                    üé§ D√©marrer R√©ponse
                </button>
                <button
                    onClick={handleStopListening}
                    disabled={!isListening}
                    className="px-4 py-2 bg-red-500 text-white rounded-lg hover:bg-red-600"
                >
                    ‚èπÔ∏è Arr√™ter
                </button>
            </div>

            {/* Deuxi√®me colonne - Gestion de la question et r√©ponse */}
            <div className="mt-6 w-full max-w-lg p-4 bg-white rounded-lg shadow-md">
                {response ? (
                    <>
                        <p className="text-gray-700">
                            <strong>R√©ponse trouv√©e :</strong>
                        </p>
                        <div className="p-3 mt-2 border border-gray-300 rounded-md min-h-[80px]">
                            <p>{response}</p>
                        </div>
                        <button
                            onClick={() => setMode("reponse")}
                            className="mt-4 px-4 py-2 bg-purple-500 text-white rounded-lg hover:bg-purple-600"
                        >
                            ‚úÖ Modifier la r√©ponse
                        </button>
                    </>
                ) : (
                    <>
                        <p className="text-gray-700">
                            <strong>Aucune r√©ponse trouv√©e</strong>
                        </p>
                        <div className="mt-4">
                            <label className="block text-gray-700">Saisir une r√©ponse manuellement :</label>
                            <textarea
                                value={manualText}
                                onChange={(e) => setManualText(e.target.value)}
                                className="w-full mt-2 p-3 border text-black border-gray-300 rounded-md"
                                placeholder="Entrez votre r√©ponse ici..."
                                rows={4}
                            />
                        </div>
                    </>
                )}

                {/* Bouton submit pour enregistrer ou soumettre */}
                <button
                    onClick={handleSubmit}
                    disabled={!text}
                    className="mt-4 px-4 py-2 bg-purple-500 text-white rounded-lg hover:bg-purple-600"
                >
                    üíæ Soumettre / Sauvegarder
                </button>
            </div>
        </div>
    );
}

{/*}
import { useState } from "react";
import { useRouter } from "next/navigation"; // Assurez-vous d'importer useRouter de Next.js

export default function SpeechToDatabase() {
    const [isAnswerSaved, setIsAnswerSaved] = useState(false);
    const [manualText, setManualText] = useState<string>(""); // R√©ponse manuelle de l'utilisateur
    const [isClient, setIsClient] = useState(false); // V√©rifie si le composant est mont√© c√¥t√© client
    const router = useRouter(); // Utiliser le hook useRouter de Next.js

    // Fonction pour enregistrer la r√©ponse dans la base de donn√©es
    const handleSaveResponse = async () => {
        if (!manualText) {
            alert("Veuillez entrer une r√©ponse avant de sauvegarder.");
            return;
        }

        // Envoi de la r√©ponse √† l'API (vous pouvez ajouter des d√©tails comme l'ID de la question si n√©cessaire)
        const response = await fetch(`/api/responses`, {
            method: "POST",
            body: JSON.stringify({
                question: manualText,  // Vous pouvez envoyer la question si vous avez un m√©canisme pour r√©cup√©rer l'ID de la question
                answer: manualText,
            }),
        });

        if (response.ok) {
            alert("R√©ponse enregistr√©e avec succ√®s !");
            setIsAnswerSaved(true); // Indiquer que la r√©ponse a √©t√© sauvegard√©e
            router.push("/rapport"); // Navigation vers la page de rapport apr√®s l'enregistrement
        } else {
            alert("√âchec de l'enregistrement de la r√©ponse.");
        }
    };

    // Assurez-vous que le composant est mont√© c√¥t√© client
    useState(() => {
        setIsClient(true);
    }, []);

    // Ne pas afficher le composant si ce n'est pas c√¥t√© client
    if (!isClient) return null;

    return (
        <div className="flex flex-col items-center p-4 bg-gray-100 min-h-screen">
            <h1 className="text-2xl font-bold mb-4">üí¨ Saisie de la r√©ponse</h1>

            {/* Affichage des champs de saisie de la r√©ponse 
            <div className="w-full max-w-lg p-4 bg-white rounded-lg shadow-md">
                <p className="text-gray-700">
                    <strong>Entrez la r√©ponse manuellement :</strong>
                </p>

                <textarea
                    value={manualText}
                    onChange={(e) => setManualText(e.target.value)} // Mettre √† jour le texte de la r√©ponse
                    className="w-full mt-2 p-3 border text-black border-gray-300 rounded-md"
                    placeholder="Tapez votre r√©ponse ici..."
                    rows={4} // Nombre de lignes visibles
                />
            </div>

            {/* Bouton d'enregistrement de la r√©ponse 
            <button
                onClick={handleSaveResponse}
                disabled={!manualText} // D√©sactive si aucun texte n'est saisi
                className={`mt-4 px-4 py-2 text-white font-semibold rounded-lg ${isAnswerSaved ? "bg-green-500 animate-pulse" : "bg-blue-500 hover:bg-blue-600"}`}
            >
                üíæ Enregistrer R√©ponse
            </button>
        </div>
    );
}
*/}

